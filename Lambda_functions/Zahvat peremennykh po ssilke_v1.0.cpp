/* Спринт 2/22: Спринт 1 → Тема 3/9: Лямбда-функции → Урок 6/12
Захват переменных по ссылке
Задание
В приют привозят собак разных пород. Информация о них хранится в двух словарях:
словарь shelter хранит текущее количество собак каждой породы,
словарь max_amount — максимальное возможное количество собак каждой породы, которое может вместить приют.
Оба словаря используют название породы в качестве ключа и количество в качестве значения.
Напишите функцию CountAndAddNewDogs, которая будет на основании вектора с породами поступивших собак обновлять словарь shelter и возвращать 
количество собак, которых удалось пристроить в приют.
Пример входных данных для функции
map<string, int> shelter = {{"landseer"s, 1}, {"otterhound"s, 2}, {"pekingese"s, 2}, {"pointer"s, 3}};
const map<string, int> max_amount = {{"landseer"s, 2}, {"otterhound"s, 3}, {"pekingese"s, 4}, {"pointer"s, 7}};
const vector<string> new_dogs = {"landseer"s, "otterhound"s, "otterhound"s, "otterhound"s, "pointer"s}; 
Формат входных данных
Гарантируется, что никакие другие собаки, кроме известных из словаря max_amount, в приют не приедут. Однако в словаре shelter могут 
изначально присутствовать не все породы.
В векторе new_dogs перечисляются породы поступивших собак в произвольном порядке. Значения в этом векторе могут повторяться. 
Пример вывода программы
3 
При этом словарь shelter должен изменить значение:
{{"landseer"s, 2}, {"otterhound"s, 3}, {"pekingese"s, 2}, {"pointer"s, 4}}; 
Требования
Не меняйте сигнатуру функции CountAndAddNewDogs
Для нахождения ответа используйте алгоритм count_if.
Вектор max_amount принимается по константной ссылке и поэтому не должен меняться. В частности, с ним запрещается использовать операцию [].
Тело функции должно состоять из одного return.
Не используйте циклы.

Примените count_if, чтобы посчитать количество собак, которых удалось устроить в приют.
В качестве аргумента count_if используйте лямбда-функцию, которая возвратит true, если собаку удалось пристроить, и false, если нет. 
Так вы посчитаете количество собак, которых получилось пристроить.
Не забудьте о том, что колбэк-функция для алгоритма count_if должна иметь ровно один аргумент, который будет пробегать все элементы 
переданного контейнера. Аккуратно разберитесь, что должно быть аргументом, а что захватом.
Обратите внимание, аргумент max_amount — константный словарь. Для доступа к его значениям нельзя использовать квадратные скобки. 
Примените метод at. Подробности можете найти в уроке «Словари и константность» темы «Map». Воспользуйтесь поиском по материалам.
Помимо возврата булевого значения лямбда-функция должна модифицировать словарь. Будьте внимательны: чтобы модифицировать именно
 сам аргумент объемлющей функции, а не его копию, нужно применить захват по ссылке.
При использовании квадратных скобок с неконстантным словарём отсутствующий ключ автоматически добавится в словарь. Его значение
 будет нулевым.*/


#include <algorithm>// Содержит функцию lexicographical_compare
#include <iostream>
#include <set>
#include <string>
#include <utility>
#include <vector>
#include <cctype> // содержит функцию tolower.
#include <numeric>
#include <sstream>
#include <map>

using namespace std;

int CountAndAddNewDogs(const vector<string>& new_dogs, const map<string, int>& max_amount,
                       map<string, int>& shelter) {
                        count_if(new_dogs.begin(), new_dogs.end(),[max_amount, &new_dogs, &shelter](const string& w){
                            if (shelter.count(w)==0) {shelter[w]=1;} 
                            else {++shelter[w];}
                            for (const auto& entry: shelter){
                                cout<<entry.first<<"--"<<entry.second<<endl;
                            }
                            if (shelter.at(w)<=max_amount.at(w)) return true;
                            return false;
                        } )
                       }

int main() {
    map<string, int> shelter { //словарь shelter хранит текущее количество собак каждой породы
        {"shepherd"s, 1},
        {"corgi"s, 3},
    };

    map<string, int> max_amount {  //словарь max_amount — максимальное возможное количество собак каждой породы, которое может вместить приют
        {"shepherd"s, 2},
        {"corgi"s, 3},
        {"shiba inu"s, 1},
    };

    cout << CountAndAddNewDogs({"shepherd"s, "shiba inu"s, "shiba inu"s, "corgi"s}, max_amount, shelter) << endl;
}